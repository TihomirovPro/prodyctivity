mixin svgMono(name, modClass)
  if modClass == undefined
    - var modClass = ''
  else
    - var modClass = ' ' + modClass
  svg(class="ico icon-sprite ico-mono-" + name + modClass)
    use(xlink:href= '/assets/dist/images/sprite-mono.svg#ico-mono-' + name)

mixin svgAside(name, modClass)
  if modClass == undefined
    - var modClass = ''
  else
    - var modClass = ' ' + modClass
  svg(class="ico icon-sprite ico-aside-" + name + modClass)
    use(xlink:href= '/assets/dist/images/sprite-aside.svg#ico-aside-' + name)

mixin svgColor(name, modClass)
  if modClass == undefined
    - var modClass = ''
  else
    - var modClass = ' ' + modClass
  svg(class="ico icon-sprite ico-color-" + name + modClass)
    use(xlink:href= '/assets/dist/images/sprite-color.svg#ico-color-' + name)

mixin webp(names, typeImg, lazy, alt, sizes)
  - let altValue
  if alt == undefined
    - altValue = ''
  else
    - altValue = alt
  if lazy == undefined || lazy == ''
    - let i = 0
    picture
      if sizes
        each size in sizes
          each sizeValue, key in size
            each value in sizeValue
              if key == 'min'
                source(srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp" media="(min-width: " + value + "px)")
                source(srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"" media="(min-width: " + value + "px)")
              if key == 'max'
                source(srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp" media="(max-width: " + value + "px)")
                source(srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"" media="(max-width: " + value + "px)")
              - i++
        img(src="/assets/dist/images/"+names[0]+"."+typeImg+"" alt=""+altValue+"")
      else
        source(srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp")
        source(srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"")
        img(src="/assets/dist/images/"+names[i]+"."+typeImg+"" alt=""+altValue+"")
  else
    - let i = 0
    picture
      if sizes
        each size in sizes
          each sizeValue, key in size
            each value in sizeValue
              if key == 'min'
                source(data-srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp" media="(min-width: " + value + "px)")
                source(data-srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"" media="(min-width: " + value + "px)")
              if key == 'max'
                source(data-srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp" media="(max-width: " + value + "px)")
                source(data-srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"" media="(max-width: " + value + "px)")
              - i++
        img(data-src="/assets/dist/images/"+names[0]+"."+typeImg+"" alt=""+altValue+"" class=lazy)
      else
        source(data-srcset="/assets/dist/images/"+names[i]+".webp" type="image/webp")
        source(data-srcset="/assets/dist/images/"+names[i]+"."+typeImg+"" type="image/"+typeImg+"")
        img(data-src="/assets/dist/images/"+names[i]+"."+typeImg+"" alt=""+altValue+"" class=lazy)
